import tkinter as tk
from tkinter import messagebox
import requests
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Function to fetch weather data from OpenWeatherMap API
def get_weather(city):
    API_KEY = 'your_api_key_here'
    BASE_URL = 'http://api.openweathermap.org/data/2.5/weather'
    
    params = {
        'q': city,
        'appid': API_KEY,
        'units': 'metric'  # Get temperature in Celsius
    }
    
    response = requests.get(BASE_URL, params=params)
    
    if response.status_code == 200:
        return response.json()
    else:
        messagebox.showerror("Error", f"City {city} not found!")
        return None

# Function to update the weather dashboard
def update_dashboard():
    city = city_entry.get()
    
    # Fetch the weather data
    data = get_weather(city)
    
    if data:
        # Extract weather data
        weather_description = data['weather'][0]['description']
        temperature = data['main']['temp']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        
        # Update text in labels
        weather_label.config(text=f"Weather: {weather_description}")
        temp_label.config(text=f"Temperature: {temperature}°C")
        humidity_label.config(text=f"Humidity: {humidity}%")
        wind_label.config(text=f"Wind Speed: {wind_speed} m/s")
        
        # Update visualization
        update_visualization(temperature, humidity, wind_speed)

# Function to update the weather visualization
def update_visualization(temperature, humidity, wind_speed):
    # Data for visualization
    labels = ['Temperature (°C)', 'Humidity (%)', 'Wind Speed (m/s)']
    values = [temperature, humidity, wind_speed]
    
    # Clear the existing plot
    ax.clear()
    
    # Create a bar chart
    ax.bar(labels, values, color=['blue', 'green', 'orange'])
    
    # Add titles and labels
    ax.set_title(f'Weather Data for {city_entry.get()}')
    ax.set_ylabel('Value')
    
    # Redraw the canvas
    canvas.draw()

# Set up the main application window
root = tk.Tk()
root.title("Weather Dashboard")
root.geometry("600x500")

# Set up entry for city name
city_entry = tk.Entry(root, width=20)
city_entry.pack(pady=10)

# Set up a button to fetch weather data
fetch_button = tk.Button(root, text="Get Weather", command=update_dashboard)
fetch_button.pack(pady=10)

# Set up labels for displaying weather data
weather_label = tk.Label(root, text="Weather: ", font=("Arial", 12))
weather_label.pack()

temp_label = tk.Label(root, text="Temperature: ", font=("Arial", 12))
temp_label.pack()

humidity_label = tk.Label(root, text="Humidity: ", font=("Arial", 12))
humidity_label.pack()

wind_label = tk.Label(root, text="Wind Speed: ", font=("Arial", 12))
wind_label.pack()

# Create a figure and axis for the matplotlib plot
fig, ax = plt.subplots(figsize=(5, 4))

# Embed the plot in the Tkinter window using FigureCanvasTkAgg
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(pady=20)

# Start the Tkinter event loop
root.mainloop()

# Making dashboard using streamlit
import streamlit as st 
import pandas as pd 
import plotly.graph_objects as go 

st.title("Stroke Prediction Dashboard") 
st.markdown("The dashboard will help a researcher to get to know \ 
more about the given datasets and it's output") 
st.sidebar.title("Select Visual Charts") 
st.sidebar.markdown("Select the Charts/Plots accordingly:") 

data = pd.read_csv("D:\PyCharm_Projects\Streamlit\demo_data_set.csv") 

chart_visual = st.sidebar.selectbox('Select Charts/Plot type', 
									('Line Chart', 'Bar Chart', 'Bubble Chart')) 

st.sidebar.checkbox("Show Analysis by Smoking Status", True, key = 1) 
selected_status = st.sidebar.selectbox('Select Smoking Status', 
									options = ['Formerly_Smoked', 
												'Smoked', 'Never_Smoked', 
												'Unknown']) 

fig = go.Figure() 

if chart_visual == 'Line Chart': 
	if selected_status == 'Formerly_Smoked': 
		fig.add_trace(go.Scatter(x = data.Country, y = data.formerly_smoked, 
								mode = 'lines', 
								name = 'Formerly_Smoked')) 
	if selected_status == 'Smoked': 
		fig.add_trace(go.Scatter(x = data.Country, y = data.Smokes, 
								mode = 'lines', name = 'Smoked')) 
	if selected_status == 'Never_Smoked': 
		fig.add_trace(go.Scatter(x = data.Country, y = data.Never_Smoked, 
								mode = 'lines', 
								name = 'Never_Smoked')) 
	if selected_status == 'Unknown': 
		fig.add_trace(go.Scatter(x=data.Country, y=data.Unknown, 
								mode='lines', 
								name="Unknown")) 

elif chart_visual == 'Bar Chart': 
	if selected_status == 'Formerly_Smoked': 
		fig.add_trace(go.Bar(x=data.Country, y=data.formerly_smoked, 
							name='Formerly_Smoked')) 
	if selected_status == 'Smoked': 
		fig.add_trace(go.Bar(x=data.Country, y=data.Smokes, 
							name='Smoked')) 
	if selected_status == 'Never_Smoked': 
		fig.add_trace(go.Bar(x=data.Country, y=data.Never_Smoked, 
							name='Never_Smoked')) 
	if selected_status == 'Unknown': 
		fig.add_trace(go.Bar(x=data.Country, y=data.Unknown, 
							name="Unknown")) 

elif chart_visual == 'Bubble Chart': 
	if selected_status == 'Formerly_Smoked': 
		fig.add_trace(go.Scatter(x=data.Country, 
								y=data.formerly_smoked, 
								mode='markers', 
								marker_size=[40, 60, 80, 60, 40, 50], 
								name='Formerly_Smoked')) 
		
	if selected_status == 'Smoked': 
		fig.add_trace(go.Scatter(x=data.Country, y=data.Smokes, 
								mode='markers', 
								marker_size=[40, 60, 80, 60, 40, 50], 
								name='Smoked')) 
		
	if selected_status == 'Never_Smoked': 
		fig.add_trace(go.Scatter(x=data.Country, 
								y=data.Never_Smoked, 
								mode='markers', 
								marker_size=[40, 60, 80, 60, 40, 50], 
								name = 'Never_Smoked')) 
	if selected_status == 'Unknown': 
		fig.add_trace(go.Scatter(x=data.Country, 
								y=data.Unknown, 
								mode='markers', 
								marker_size=[40, 60, 80, 60, 40, 50], 
								name="Unknown")) 

st.plotly_chart(fig, use_container_width=True) 

